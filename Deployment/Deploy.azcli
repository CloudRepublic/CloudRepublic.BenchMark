$location = "West Europe"
$resourceGroupName = "BenchMark";
$resourceGroupLinuxName = "BenchMarkLinux";
$appInsightsName = "BenchMark-Insights";
$storageAccountName = "benchmark";
$storageAccountLinuxName = "benchmarklinux";
$sqlServerName = "sql-srv-benchMark";
$sqlServerAdminUsername = "benchmarkAdmin";
$sqlServerAdminPassword = "MySuperSecurePassword123!";
$sqlDatabaseName = "benchmark";
$redisCacheName = "BenchMark";
$apimName = "BenchMark";
$consumptionLocation = "westeurope"
$orchestratorFunctionName = "BenchMark-Win-Orchestrator"
$windowsSampleFunctionCsharpName = "BenchMark-Sample-Win-Csharp"
$windowsSampleFunctionNodejsName = "BenchMark-Sample-Win-Nodejs"
$linuxSampleFunctionCsharpName = "BenchMark-Sample-Lin-Csharp"
$linuxSampleFunctionNodejsName = "BenchMark-Sample-Lin-Nodejs"
$backendApiFunctionName = "BenchMark-Win-Api"

#login into subscription
$subscription = az login

#create default resource-group
$resourceGroup = az group create --name $resourceGroupName --location $location | ConvertFrom-Json

#create linux resource-group
$resourceGroupLinux = az group create --location $location --name $resourceGroupLinuxName | ConvertFrom-Json

#create app-insights
$appInsights = az resource create --resource-group $resourceGroupName --resource-type "Microsoft.Insights/components" --name $appInsightsName --location $location --properties '{}' | ConvertFrom-Json

#create storage account windows
#static websites needs to be enable manually 
$storageAccount = az storage account create --resource-group $resourceGroupName --name $storageAccountName --sku Standard_LRS --https-only true --location $location --kind StorageV2 --access-tier Hot | ConvertFrom-Json

#create storage account windows
$storageAccount = az storage account create --resource-group $resourceGroupLinuxName --name $storageAccountLinuxName --sku Standard_LRS --https-only true --location $location --kind StorageV2 --access-tier Hot | ConvertFrom-Json

#create sql server
$sqlServer = az sql server create --location $location --resource-group $resourceGroupName --name $sqlServerName --admin-user $sqlServerAdminUsername --admin-password $sqlServerAdminPassword | ConvertFrom-Json

#create sql database
$sqlDatabase = az sql db create --service-objective S0 --capacity 10 --name $sqlDatabaseName --server $sqlServerName --resource-group $resourceGroupName | ConvertFrom-Json

#create redis cache
$redisCache = az redis create --resource-group $resourceGroupName --name $redisCacheName --location $location --sku Basic --vm-size c0 | ConvertFrom-Json

#create api management instance from template
$apim = az group deployment create --resource-group $resourceGroupName --template-file Deployment/Templates/apim.template.json --parameters location=$location sku='Consumption' publisherEmail='admin@example.com' publisherName='admin' apiFunctionName=$BackendApiFunc.name apiFunctionId=$BackendApiFunc.id redisName=$redisCache.name redisKey=$redisCache.accessKeys.primaryKey | ConvertFrom-Json

#create function for orchestrator
$orchestratorFunc = az functionapp create --resource-group $resourceGroupName --name $orchestratorFunctionName --storage-account $storageAccountName --consumption-plan-location  $consumptionLocation --runtime dotnet --os-type Windows --app-insights-key $appInsights.properties.InstrumentationKey | ConvertFrom-Json

#create backend api
$BackendApiFunc = az functionapp create --resource-group $resourceGroupName --name $backendApiFunctionName --storage-account $storageAccountName --consumption-plan-location  $consumptionLocation --runtime dotnet --os-type Windows --app-insights-key $appInsights.properties.InstrumentationKey | ConvertFrom-Json

#create windows sample function csharp
$sampleFuncWindowsCsharp = az functionapp create --resource-group $resourceGroupName --name $windowsSampleFunctionCsharpName --storage-account $storageAccountName --consumption-plan-location  $consumptionLocation --runtime dotnet --os-type Windows | ConvertFrom-Json

#create windows sample function nodejs
$sampleFuncWindowsNodejs = az functionapp create --resource-group $resourceGroupName --name $windowsSampleFunctionNodejsName --storage-account $storageAccountName --consumption-plan-location  $consumptionLocation --runtime node --os-type Windows | ConvertFrom-Json

#create linux sample function csharp
$sampleFuncLinuxCsharp = az functionapp create --resource-group $resourceGroupLinuxName --name $linuxSampleFunctionCsharpName --storage-account $storageAccountLinuxName --consumption-plan-location  $consumptionLocation --runtime dotnet --os-type Linux | ConvertFrom-Json

#create linux sample function nodejs
$sampleFuncLinuxNodejs = az functionapp create --resource-group $resourceGroupLinuxName --name $linuxSampleFunctionNodejsName --storage-account $storageAccountLinuxName --consumption-plan-location  $consumptionLocation --runtime node --os-type Linux | ConvertFrom-Json